############################### DEFAULT #####################################
# Chain ID
CHAIN_ID=167009

# Exposed ports
PORT_L2_EXECUTION_ENGINE_HTTP=8547
PORT_L2_EXECUTION_ENGINE_WS=8548
PORT_L2_EXECUTION_ENGINE_METRICS=6060
PORT_L2_EXECUTION_ENGINE_P2P=30306
PORT_PROVER_SERVER=9876
PORT_PROMETHEUS=9091
PORT_GRAFANA=3001
# Comma-separated profiles to be used by default (l2_execution_engine,prover)
# Proposer is deprecated for community as of Hekla Based Preconfs, so profile has been removed.
COMPOSE_PROFILES=l2_execution_engine

# Comma separated L2 execution engine bootnode URLs for P2P discovery bootstrap
BOOT_NODES=enode://1733a899719c64edc8ad6818598b6b9aa41889297a7ee7b9cbf3e610d4df2e207b0e04fd40060a36f020116ab5ad451201e448fc224cd38b0a0d5fcbb1d2c812@34.126.109.163:30303,enode://3c7e00eff6a98f5d49084db988b9bee9cab3338ee809d88e41318dc7ea7fb67ab8e8a923e4a9f193fecd7698ef92c0977e07ac850e10777bdd11cc25045d63bf@35.198.236.33:30303,enode://eb5079aae185d5d8afa01bfd2d349da5b476609aced2b57c90142556cf0ee4a152bcdd724627a7de97adfc2a68af5742a8f58781366e6a857d4bde98de6fe986@34.66.210.65:30303,enode://2294f526cbb7faa778192289c252307420532191438ce821d3c50232e019a797bda8c8f8541de0847e953bb03096123856935e32294de9814d15d120131499ba@34.72.186.213:30303

# Taiko protocol contract addresses
TAIKO_INBOX_ADDRESS=0x79C9109b764609df928d16fC4a91e9081F7e87DB
TAIKO_TOKEN_L1_ADDRESS=0x6490E12d480549D333499236fF2Ba6676C296011
PRECONFIRMATION_WHITELIST=0x4aA38A15109eAbbf09b7967009A2e00D2D15cb84
TAIKO_ANCHOR_ADDRESS=0x1670090000000000000000000000000000010001

# Node Verbosity
VERBOSITY=3

# P2P
DISABLE_P2P_SYNC=false
P2P_SYNC_URL=https://rpc.hekla.taiko.xyz

## Driver configs for preconfirmations
# Enable preconfs p2p network, defaults to true. If set to false, your node will NOT join the P2P network and receive preconf blocks.
ENABLE_PRECONFS_P2P=true
# IP address where your node can be reached which will be used to join the P2P network and received preconfirmation blocks
PUBLIC_IP=
# TCP Port used for discovery on the p2p network, it MUST be open and external and accessible via the same IP address as the public IP.
P2P_TCP_PORT=4001
# UDP Port used for discovery on the p2p network, it MUST be open and external and accessible via the same IP address as the public IP.
P2P_UDP_PORT=30303
# You may have to configure port forwarding rules in your firewall/router: if so, simply add rules for the above ports.
# Private Keys for Peer ID: One must be set to persist your peer ID.
# This private key does not need to hold eth or any valuables, it is simply to persist an identity
# PRIV_RAW is the hexstring private key in plaintext.
PRIV_RAW=
# PRIV_FILE is the name of your txt file that consists entirely of a private key with no newlines IN YOUR /script/ DIRECTORY.
# We recommend you default to privkey.txt, as it is in the .gitignore.
PRIV_FILE=

############################### REQUIRED #####################################
# L1 Holesky RPC endpoints (you will need an RPC provider such as BlockPi, or run a full Holesky node yourself).
# If you are using a local Holesky L1 node, you can refer to it as "http://host.docker.internal:8545" and "ws://host.docker.internal:8546", which refer to the default ports in the .env for an eth-docker L1 node.
# However, you may need to add this host to docker-compose.yml. If that does not work, you can try the private local ip address (e.g. http://192.168.1.15:8545). You can find that with `ip addr show` or a similar command.
# In addition, you can use your public ip address followed by the specific ports for http and ws (e.g. http://82.168.1.15:8545). You can find that with `hostname -I | awk '{print $1}'`.
L1_ENDPOINT_WS=
# HTTP RPC endpoint of a L1 beacon node. Everything behind the top-level domain is ignored. Make sure you don't need to work with subdirectories. The path will always be /eth/v1...
# If you are using a local Holesky L1 node, you can refer to it as "http://host.docker.internal:5052", which refer to the default REST port in the .env for an eth-docker L1 node.
# Or follow the recommendations for http RPC endoint using the default REST port "5052", (e.g. http://82.168.1.15:5052).
L1_BEACON_HTTP=

############################### OPTIONAL #####################################
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=false
# SGX Raiko service endpoint, required if not running a guardian prover.
SGX_RAIKO_HOST=
# A L1 account private key (with a balance of TTKOh deposited on TaikoInbox) which will be used to sign the bond for proving the block.
# WARNING: only use a test account, pasting your private key in plain text here is not secure.
L1_PROVER_PRIVATE_KEY=
# Amount to approve TaikoInbox contracts for TaikoToken usage. i.e 250 TTKOh = 250
TOKEN_ALLOWANCE=
# Whether to prove unassigned blocks or not (blocks that have expired their proof window
# without the original prover submitting a proof.).
PROVE_UNASSIGNED_BLOCKS=true
# The size of batch sgx proofs. If set to 1, submits proof upon assignment, if x>1, submits a batch of proofs when x number of blocks are assigned.
# Setting this value to a number greater than 1 means you are enabling the proof aggregation functionality, please consult our documentation to understand the risks before doing so.
SGX_BATCH_SIZE=1
# The size of batch zkvm proofs. If set to 1, submits proof upon assignment, if x>1, submits a batch of proofs when x number of blocks are assigned.
# Setting this value to a number greater than 1 means you are enabling the proof aggregation functionality, please consult our documentation to understand the risks before doing so.
ZKVM_BATCH_SIZE=1
# Time interval to prove blocks, even if the number of pending proofs does not exceed the batchSize, this flag only works when the proof aggregation is enabled.
# We recommend that this value is set no greater than 45min, default is 30min. Ex: 30m0s
FORCE_BATCH_PROVING_INTERVAL=
# Time interval to poll proofs from raiko host.
PROOF_POLLING_INTERVAL=
# If set, prover will start proving batches from the batch with this ID
STARTING_BATCH_ID=
# Comma separated list of local proposer addresses, if set, prover will prove the batches proposed by these addresses before the assignment expiration time
LOCAL_PROPOSER_ADDRESSES=

# Transaction Manager Flags (Leave blank if using default values.) These only affect Prover and Proposer.

# The multiplier applied to fee suggestions to put a hard limit on fee increases
TX_FEE_LIMIT_MULTIPLIER=
# The minimum threshold (in GWei) at which fee bumping starts to be capped. Allows arbitrary fee bumps below this threshold.
TX_FEE_LIMIT_THRESHOLD=
# Gas limit will be used for transactions (0 means using gas estimation)
TX_GAS_LIMIT=
# Enforces a minimum base fee (in GWei) to assume when determining tx fees. 1 GWei by default
TX_MIN_BASEFEE=
# Enforces a minimum tip cap (in GWei) to use when determining tx fees. 1 GWei by default.
TX_MIN_TIP_CAP=
# Timeout for aborting a tx send if the tx does not make it to the mempool.
TX_NOT_IN_MEMPOOL_TIMEOUT=
# Number of confirmations which we will wait after sending a transaction
TX_NUM_CONFIRMATIONS=
# Frequency to poll for receipts
TX_RECEIPT_QUERY_INTERVAL=
# Duration we will wait before resubmitting a transaction to L1. Ex: 2s for 2 seconds
TX_RESUBMISSION=
# Number of ErrNonceTooLow observations required to give up on a tx at a particular nonce without receiving confirmation
TX_SAFE_ABORT_NONCE_TOO_LOW=
# Timeout for sending transactions. If 0 it is disabled.
TX_SEND_TIMEOUT=

